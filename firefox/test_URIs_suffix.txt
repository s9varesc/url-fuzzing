var gHashSuffixes = ["#", "#myRef", "#myRef?a=b", "#myRef#", "#myRef#x:yz"];

// TEST HELPER FUNCTIONS
// ---------------------
function do_info(text, stack) {
  if (!stack) {
    stack = Components.stack.caller;
  }

  dump(
    "\n" +
      "TEST-INFO | " +
      stack.filename +
      " | [" +
      stack.name +
      " : " +
      stack.lineNumber +
      "] " +
      text +
      "\n"
  );
}



// Checks that the given property on aURI matches the corresponding property
// in the test bundle (or matches some function of that corresponding property,
// if aTestFunctor is passed in).
function do_check_property(aTest, aURI, aPropertyName, aTestFunctor) {

  if (aTest[aPropertyName]) {
    var comp;
    var expectedVal = aTestFunctor
      ? aTestFunctor(aTest[aPropertyName])
      : aTest[aPropertyName];
    
    try {
      comp=aURI[aPropertyName];
    } catch(e) {
      dump("\n{\"url\":\""+ aTest.spec+"\", \"error\":{\"component\":\""+aPropertyName+"\", \"expected\":\""+expectedVal +"\", \"actual\":\""+e.name+" " + e.result+"\"}}"); 
      do_throw(e.result);
    }
    do_info(
      "testing " +
        aPropertyName +
        " of " +
        (aTestFunctor ? "modified '" : "'") +
        aTest.spec +
        "' is '" +
        expectedVal +
        "' actually is '" + aURI[aPropertyName] + "'"
    );

    if (aURI[aPropertyName] != expectedVal){ //needed to display custom format, adding assertion message spams output
      dump("\n{\"url\":\""+ aTest.spec+"\", \"error\":{\"component\":\""+aPropertyName+"\", \"expected\":\""+expectedVal +"\", \"actual\":\""+aURI[aPropertyName]+"\"}}");
    }

    Assert.equal(aURI[aPropertyName], expectedVal);
  }
}

// Test that a given URI parses correctly into its various components.
function do_test_uri_basic(aTest) {
  var URI;

  try {
    URI = gIoService.newURI(aTest.spec);
  } catch (e) {
    do_info("Caught error on parse of" + aTest.spec + " Error: "+e.name+" " + e.result);
    dump("\n{\"url\":\""+ aTest.spec+"\", \"exception\":\""+e.name+" "+e.result+"\"}");
    if (aTest.fail) {
      Assert.equal(e.result, aTest.result);
      return;
    }
    do_throw(e.result);
  }

  
  // Check the various components
  do_check_property(aTest, URI, "scheme");
  do_check_property(aTest, URI, "prePath");
  do_check_property(aTest, URI, "pathQueryRef");
  do_check_property(aTest, URI, "query");
  do_check_property(aTest, URI, "ref");
  do_check_property(aTest, URI, "port");
  do_check_property(aTest, URI, "username");
  do_check_property(aTest, URI, "password");
  do_check_property(aTest, URI, "host");
  do_check_property(aTest, URI, "specIgnoringRef");
  do_check_property(aTest, URI, "hasRef");

  /*if ("hasRef" in aTest) { 
    //do_info("testing hasref: " + aTest.hasRef + " vs " + URI.hasRef);

    Assert.equal(aTest.hasRef, URI.hasRef,"\n{url:\""+ aTest.spec+"\", error:{component:\"hasRef\", expected:\""+aTest.hasRef +"\", actual:\""+URI.hasRef+"\"}}");
  }*/
}





// TEST MAIN FUNCTION
// ------------------
function run_test() {

  gTests.forEach(function(aTest) {
    // Check basic URI functionality
    do_test_uri_basic(aTest);
  });
}
