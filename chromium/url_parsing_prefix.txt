
#include <stddef.h>

#include "base/stl_util.h"
#include "testing/gtest/include/gtest/gtest.h"
//#include "url/third_party/mozilla/url_parse.h"
#include "url/gurl.h"
#include "url/url_util.h"


namespace url {
namespace {

// describes the structure of inputs

struct URLParseCase {
  //TODO might need to include inner_... fields (see url_parse_unittest.cc:81-86)
  const char* input;

  const char* scheme;
  const char* username;
  const char* password;
  const char* host;
  int port;
  const char* path;
  const char* query;
  const char* ref;
};

void CheckValidity(const URLParseCase& parse_case, const GURL& parsed_url) {
  ASSERT_TRUE(parsed_url.is_valid()) << << "{\"url\":\""<< parse_cases[i].input<<"\", \"exception\":\"invalid URL\"}";
  return;
}

void CheckComponents(const URLParseCase& parse_case, const GURL& parsed_url) {
  ASSERT_EQ(parse_cases[i].scheme, parsed_url.scheme()) << "{\"url\":\""<< parse_cases[i].input<<"\", \"error\":{\"component\":\"scheme\", \"expected\":\""<<parse_cases[i].scheme <<"\", \"actual\":\""<<parsed_url.scheme()<<"\"}}";
    ASSERT_EQ(parse_cases[i].username, parsed_url.username())<< "{\"url\":\""<< parse_cases[i].input<<"\", \"error\":{\"component\":\"username\", \"expected\":\""<<parse_cases[i].username <<"\", \"actual\":\""<<parsed_url.username()<<"\"}}";
    ASSERT_EQ(parse_cases[i].password, parsed_url.password())<< "{\"url\":\""<< parse_cases[i].input<<"\", \"error\":{\"component\":\"password\", \"expected\":\""<<parse_cases[i].password <<"\", \"actual\":\""<<parsed_url.password()<<"\"}}";
    ASSERT_EQ(parse_cases[i].host, parsed_url.host())<< "{\"url\":\""<< parse_cases[i].input<<"\", \"error\":{\"component\":\"host\", \"expected\":\""<<parse_cases[i].host <<"\", \"actual\":\""<<parsed_url.host()<<"\"}}";
    ASSERT_EQ(parse_cases[i].port, parsed_url.IntPort())<< "{\"url\":\""<< parse_cases[i].input<<"\", \"error\":{\"component\":\"port\", \"expected\":\""<<parse_cases[i].port <<"\", \"actual\":\""<<parsed_url.IntPort()<<"\"}}";
    ASSERT_EQ(parse_cases[i].path, parsed_url.path())<< "{\"url\":\""<< parse_cases[i].input<<"\", \"error\":{\"component\":\"path\", \"expected\":\""<<parse_cases[i].path <<"\", \"actual\":\""<<parsed_url.path()<<"\"}}";
    ASSERT_EQ(parse_cases[i].query, parsed_url.query())<< "{\"url\":\""<< parse_cases[i].input<<"\", \"error\":{\"component\":\"query\", \"expected\":\""<<parse_cases[i].query <<"\", \"actual\":\""<<parsed_url.query()<<"\"}}";
    ASSERT_EQ(parse_cases[i].ref, parsed_url.ref())<< "{\"url\":\""<< parse_cases[i].input<<"\", \"error\":{\"component\":\"ref\", \"expected\":\""<<parse_cases[i].ref <<"\", \"actual\":\""<<parsed_url.ref()<<"\"}}";
  return;
}

//Test inputs